apiVersion: v1
kind: Secret
metadata:
  name: metabase-secrets
type: Opaque
data:
  MB_DB_USER: cmltc19hZG1pbg==  # rims_admin in base64
  MB_DB_PASS: cmltc19wYXNzd29yZA==  # rims_password in base64
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: metabase-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: metabase
spec:
  replicas: 1
  selector:
    matchLabels:
      app: metabase
  template:
    metadata:
      labels:
        app: metabase
    spec:
      containers:
      - name: metabase
        image: ${REGISTRY_URL}/myRIMS/metabase:latest
        ports:
        - containerPort: 3000
        env:
        - name: MB_DB_TYPE
          value: "postgres"
        - name: MB_DB_DBNAME
          value: "metabase"
        - name: MB_DB_PORT
          value: "5432"
        - name: MB_DB_USER
          valueFrom:
            secretKeyRef:
              name: metabase-secrets
              key: MB_DB_USER
        - name: MB_DB_PASS
          valueFrom:
            secretKeyRef:
              name: metabase-secrets
              key: MB_DB_PASS
        - name: MB_DB_HOST
          value: "postgres"
        - name: JAVA_OPTS
          value: "-Xmx2g"
        volumeMounts:
        - name: metabase-data
          mountPath: /metabase-data
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 60
          periodSeconds: 10
      volumes:
      - name: metabase-data
        persistentVolumeClaim:
          claimName: metabase-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: metabase
spec:
  selector:
    app: metabase
  ports:
  - port: 3000
    targetPort: 3000
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: metabase-ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  rules:
  - host: metabase.${DOMAIN}
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: metabase
            port:
              number: 3000
